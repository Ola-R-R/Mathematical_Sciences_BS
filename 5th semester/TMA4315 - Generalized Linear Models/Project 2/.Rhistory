classicmod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = classicdata)
classicmod0 <- vglm(y ~ 1, family=cumulative(link="logitlink"), data = classicdata)
classicmod0 <- vglm(y ~ 1, family=cumulative(link="logitlink"), data = classicdata)
summary(classicmod0)
classicmod0 <- vglm(y ~ 1, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
summary(classicmod0)
summary(classicmod11)
classicmod11 <- vglm(y ~ carlsen_white + firouzja_white + rapport_white + duda_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
summary(classicmod11)
classicmod11 <- vglm(y ~ carlsen_white + firouzja_white + rapport_white + duda_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
summary(classicmod11)
waldtest(classicmod0, classicmod11)
classicmod11 <- vglm(y ~ carlsen_white + firouzja_white + rapport_white + duda_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
waldtest(classicmod0, classicmod11)
waldtest(mod0, mod11)
waldtest(classicmod0, classicmod1)
waldtest(classicmod0, classicmod1)
waldtest(classicmod0, classicmod11)
classicmod11 <- vglm(y ~ carlsen_white, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
AIC(mod0)
AIC(mod1)
AIC(mod11)
mod11 <- vglm(y ~ carlsen_white, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
AIC(mod11)
classicdata <- subset(chessdata, type == "classic")
carlsen_white <- as.factor(classicdata$white == "carlsen")
caruana_white <- as.factor(classicdata$white == "caruana")
duda_white <- as.factor(classicdata$white == "duda")
firouzja_white <- as.factor(classicdata$white == "firouzja")
karjakin_white <- as.factor(classicdata$white == "karjakin")
nepomniachtchi_white <- as.factor(classicdata$white == "nepomniachtchi")
rapport_white <- as.factor(classicdata$white == "rapport")
tari_white <- as.factor(classicdata$white == "tari")
carlsen_black <- as.factor(classicdata$black == "carlsen")
caruana_black <- as.factor(classicdata$black == "caruana")
duda_black <- as.factor(classicdata$black == "duda")
firouzja_black <- as.factor(classicdata$black == "firouzja")
karjakin_black <- as.factor(classicdata$black == "karjakin")
nepomniachtchi_black <- as.factor(classicdata$black == "nepomniachtchi")
rapport_black <- as.factor(classicdata$black == "rapport")
tari_black <- as.factor(classicdata$black == "tari")
# making only classic data
classicdata <- subset(chessdata, type == "classic")
carlsen_white <- as.factor(classicdata$white == "carlsen")
caruana_white <- as.factor(classicdata$white == "caruana")
duda_white <- as.factor(classicdata$white == "duda")
firouzja_white <- as.factor(classicdata$white == "firouzja")
karjakin_white <- as.factor(classicdata$white == "karjakin")
nepomniachtchi_white <- as.factor(classicdata$white == "nepomniachtchi")
rapport_white <- as.factor(classicdata$white == "rapport")
tari_white <- as.factor(classicdata$white == "tari")
carlsen_black <- as.factor(classicdata$black == "carlsen")
caruana_black <- as.factor(classicdata$black == "caruana")
duda_black <- as.factor(classicdata$black == "duda")
firouzja_black <- as.factor(classicdata$black == "firouzja")
karjakin_black <- as.factor(classicdata$black == "karjakin")
nepomniachtchi_black <- as.factor(classicdata$black == "nepomniachtchi")
rapport_black <- as.factor(classicdata$black == "rapport")
tari_black <- as.factor(classicdata$black == "tari")
# model from the classic data
classicmod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = classicdata)
# summary(classicmod1)
classicmod0 <- vglm(y ~ 1, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
# summary(classicmod0)
waldtest(classicmod0, classicmod1)
classicmod11 <- vglm(y ~ carlsen_white + firouzja_white + rapport_white + duda_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
# summary(classicmod11)
# summary(classicmod11)
waldtest(classicmod0, classicmod11)
summary(classicmod1)
# making only classic data
classicdata <- subset(chessdata, type == "classic")
c_carlsen_white <- as.factor(classicdata$white == "carlsen")
c_caruana_white <- as.factor(classicdata$white == "caruana")
c_duda_white <- as.factor(classicdata$white == "duda")
c_firouzja_white <- as.factor(classicdata$white == "firouzja")
c_karjakin_white <- as.factor(classicdata$white == "karjakin")
c_nepomniachtchi_white <- as.factor(classicdata$white == "nepomniachtchi")
c_rapport_white <- as.factor(classicdata$white == "rapport")
c_tari_white <- as.factor(classicdata$white == "tari")
c_carlsen_black <- as.factor(classicdata$black == "carlsen")
c_caruana_black <- as.factor(classicdata$black == "caruana")
c_duda_black <- as.factor(classicdata$black == "duda")
c_firouzja_black <- as.factor(classicdata$black == "firouzja")
c_karjakin_black <- as.factor(classicdata$black == "karjakin")
c_nepomniachtchi_black <- as.factor(classicdata$black == "nepomniachtchi")
c_rapport_black <- as.factor(classicdata$black == "rapport")
c_tari_black <- as.factor(classicdata$black == "tari")
# model from the classic data
classicmod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = classicdata)
# summary(classicmod1)
classicmod0 <- vglm(y ~ 1, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
# summary(classicmod0)
waldtest(classicmod0, classicmod1)
summary(classicmod1)
classicmod11 <- vglm(y ~ c_duda_black + c_karjakin_black + c_rapport_black + c_tari_black, family=cumulative(parallel = T, link="logitlink"), data = classicdata)
summary(classicmod11)
# summary(classicmod11)
waldtest(classicmod0, classicmod11)
View(classicdata)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE)
library("tidyverse")
library("aod")
library("lmtest")
library("readxl")
library("VGAM")
library("broom")
library("ggfortify")
library("MASS")
library("dampack")
library("mdscore")
chessdata <- read_excel("Norway Chess 2020_2021.xlsx")
# Adding dummy variable to classic and armageddon matches
chessdata$classic <- ifelse(chessdata$type == "classic", 1, 0)
chessdata$armageddon <- ifelse(chessdata$type == "armageddon", 1, 0)
# Alt. hypothesis
mod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = chessdata)
# summary(mod1)
# Null hypothesis
mod0 <- vglm(y ~ 1, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
# summary(mod0)
waldtest(mod0, mod1)
# making only classic data
classicdata <- subset(chessdata, type == "classic")
# making only armageddon data
armageddondata <- subset(chessdata, type == "armageddon")
hist(y, chessdata)
hist(chessdata$y)
hist(classicdata$y)
hist(armageddondata$y)
hist(classicdata$y)
hist(armageddondata$y)
# making only armageddon data
armageddondata <- subset(chessdata, type == "armageddon")
View(armageddondata)
chessdata <- read_excel("Norway Chess 2020_2021.xlsx")
# making only classic data
classicdata <- subset(chessdata, type == "classic")
View(chessdata)
View(classicdata)
View(armageddondata)
# making only armageddon data
armageddondata <- subset(chessdata, type == "armageddon")
# Alt. hypothesis
mod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = chessdata)
summary(mod1)
aronian_white <- as.factor(chessdata$white == "
aronian")
aronian_white
carlsen_white
carlsen_white <- as.factor(chessdata$white == "carlsen")
carlsen_white
aronian_white <- as.factor(chessdata$white == "aronian")
aronian_white
aronian_white <- as.factor(chessdata$white == "aronian")
carlsen_white <- as.factor(chessdata$white == "carlsen")
caruana_white <- as.factor(chessdata$white == "caruana")
duda_white <- as.factor(chessdata$white == "duda")
firouzja_white <- as.factor(chessdata$white == "firouzja")
karjakin_white <- as.factor(chessdata$white == "karjakin")
nepomniachtchi_white <- as.factor(chessdata$white == "nepomniachtchi")
rapport_white <- as.factor(chessdata$white == "rapport")
tari_white <- as.factor(chessdata$white == "tari")
aronian_black <- as.factor(chessdata$black == "aronian")
carlsen_black <- as.factor(chessdata$black == "carlsen")
caruana_black <- as.factor(chessdata$black == "caruana")
duda_black <- as.factor(chessdata$black == "duda")
firouzja_black <- as.factor(chessdata$black == "firouzja")
karjakin_black <- as.factor(chessdata$black == "karjakin")
nepomniachtchi_black <- as.factor(chessdata$black == "nepomniachtchi")
rapport_black <- as.factor(chessdata$black == "rapport")
tari_black <- as.factor(chessdata$black == "tari")
mod11 <- vglm(y ~ aronian_white + carlsen_white + caruana_white + duda_white + firouzja_white + karjakin_white + nepomniachtchi_white + rapport_white + tari_white + aronian_black + carlsen_black + caruana_black + duda_black + firouzja_black + karjakin_black + nepomniachtchi_black + rapport_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
mod111 <- vglm(y ~ aronian_white + carlsen_white + caruana_white + duda_white + firouzja_white + karjakin_white + nepomniachtchi_white + rapport_white + tari_white + aronian_black + carlsen_black + caruana_black + duda_black + firouzja_black + karjakin_black + nepomniachtchi_black + rapport_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
summary(mod111)
mod111 <- vglm(y ~ aronian_white + carlsen_white + caruana_white + duda_white + firouzja_white + karjakin_white + nepomniachtchi_white + rapport_white + tari_white + aronian_black + carlsen_black + caruana_black + duda_black + firouzja_black + karjakin_black + nepomniachtchi_black + rapport_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
mod111 <- vglm(y ~ carlsen_white + caruana_white + duda_white + firouzja_white + karjakin_white + nepomniachtchi_white + rapport_white + tari_white + carlsen_black + caruana_black + duda_black + firouzja_black + karjakin_black + nepomniachtchi_black + rapport_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
summary(mod111)
aronian_white
carlsen_white
# Null hypothesis
mod0 <- vglm(y ~ 1, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
summary(mod0)
mod111 <- vglm(y ~ aronian_white + carlsen_white + caruana_white + duda_white + firouzja_white + karjakin_white + nepomniachtchi_white + rapport_white + tari_white + aronian_black + carlsen_black + caruana_black + duda_black + firouzja_black + karjakin_black + nepomniachtchi_black + rapport_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
chessdata <- read_excel("Norway Chess 2020_2021.xlsx")
mod122 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = F, link="logitlink"), data = chessdata)
chessdata <- read_excel("Norway Chess 2020_2021.xlsx")
mod122 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = F, link="logitlink"), data = chessdata)
mod122 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = F, link="logit"), data = chessdata)
summary(mod122)
mod122 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logit"), data = chessdata)
summary(mod122)
mod122 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = F, link="logit"), data = chessdata)
summary(mod122)
glm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = chessdata)
glm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = chessdata)
glm(y ~ factor(white) + factor(black), family(cumulative(parallel = T, link="logitlink")), data = chessdata)
glm(y ~ factor(white) + factor(black), family(binomial(link = "logit")), data = chessdata)
glm(y ~ factor(white) + factor(black), family = (binomial(link = "logit")), data = chessdata)
mod111 <- vglm(y ~ aronian_white + carlsen_white + caruana_white + duda_white + firouzja_white + karjakin_white + nepomniachtchi_white + rapport_white + tari_white + aronian_black + carlsen_black + caruana_black + duda_black + firouzja_black + karjakin_black + nepomniachtchi_black + rapport_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
summary(mod111)
chessdatakop <- read_excel("Norway Chess 2020_2021 – Kopi.xlsx")
View(chessdatakop)
chessdatakop <- read_excel("Norway Chess 2020_2021 – Kopi.xlsx")
mod1214 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = chessdatakop)
summary(mod1214)
summary(mod1)
waldtest(armageddonmod0, armageddonmod1)
# making only armageddon data
armageddondata <- subset(chessdata, type == "armageddon")
# model from the armageddon data
armageddonmod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = armageddondata)
# summary(armageddonmod1)
armageddonmod0 <- vglm(y ~ 1, family=cumulative(parallel = T, link="logitlink"), data = armageddondata)
# summary(armageddonmod0)
waldtest(armageddonmod0, armageddonmod1)
armageddondataasd <- subset(armageddondata, white != "aronian")
armageddondataasd
View(armageddondataasd)
armageddondataasdwad <- subset(armageddondataasd, black != "aronian")
View(armageddondataasdwad)
hist(armageddondataasdwad$y)
summary(armageddonmod1)
mod1 <- vglm(y ~ aronian_white + aronian_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
summary(mod1)
AIC(mod0)
AIC(mod1)
AIC(mod11)
# Chunk 1: setup
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE)
library("tidyverse")
library("aod")
library("lmtest")
library("readxl")
library("VGAM")
library("broom")
library("ggfortify")
library("MASS")
library("dampack")
library("mdscore")
# Chunk 2
mammals <- read.table("https://www.math.ntnu.no/~jarlet/statmod/mammals.dat", header=T)
Species <- ifelse(1:nrow(mammals) == 32, "Human", "Non-human")
ggplot(mammals, aes(x = log(body), y = log(brain), color = Species)) +
geom_point() +
geom_smooth(formula = y ~ x, method = lm, se = F, color = "black")
h0 <- glm(log(brain) ~ log(body), data = mammals, family = "gaussian")
h0$coefficients
# Chunk 3
# Adding dummy variable to human
mammals$human <- ifelse(mammals$species == "Human", 1, 0)
h1 <- glm(log(brain) ~ log(body) + human, data = mammals, family = "gaussian")
# summary(h1)
h1nonlog <- glm(brain ~ body + human, data = mammals, family = "gaussian")
# summary(h1nonlog)
cat("Human brain size difference is", h1$coefficients[3], "using the log-transformation")
cat("Human brain size difference is", h1nonlog$coefficients[3], "without the log-transformation")
# Chunk 4
summary(h1)
# Chunk 5
# Plotting residuals
df <- fortify(h0)
ggplot(df, aes(x = .fitted, y = .resid, color = Species)) +
geom_point() +
geom_hline(yintercept = 0)
# Chunk 6
gglm <- glm(brain ~ log(body) + human, data = mammals, family = Gamma(link = "log"))
# summary(gglm)
ggplot(mammals, aes(x = log(body) + human, y = brain, color = Species)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "glm", method.args = list(family = Gamma(link = "log")), se = F, color = "black")
# Chunk 7
h1kleiber <- glm(log(brain) ~ I((3/4) * log(body)) + human, data = mammals, family = "gaussian")
# summary(h1kleiber)
lr.test(h1kleiber, h1)
gglmkleiber <- glm(brain ~ human, offset = I((3/4) * log(body)), data = mammals, family = Gamma(link = "log"))
# summary(gglmkleiber)
lr.test(gglmkleiber, gglm)
# Chunk 8
h1nonlogresp <- glm(brain ~ log(body) + human, data = mammals, family = "gaussian")
AIC(h1nonlogresp)
AIC(gglm)
# Chunk 9
summary(gglm)
dispersion <- 0.5512612
alpha <- 1/dispersion
k3 <- psigamma(alpha, 2)
k2 <- psigamma(alpha, 1)
cat("Skew is", k3/((k2)^(1.5)))
# Chunk 10
resid <- as.vector(h0$residuals)
men <- mean(resid)
teller <- 0
for (i in 1:62) {
teller <- teller + (resid[i] - men)^3
}
teller <- (1/62) * teller
nevner <- 0
for (i in 1:62) {
nevner <- nevner + (resid[i] - men)^2
}
nevner <- ((1/(62-1)) * nevner)^(3/2)
cat("Sample Skew from model in a) is", teller/nevner)
# Chunk 11
chessdata <- read_excel("Norway Chess 2020_2021.xlsx")
# Alt. hypothesis
mod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = chessdata)
# summary(mod1)
# Null hypothesis
mod0 <- vglm(y ~ 1, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
# summary(mod0)
waldtest(mod0, mod1)
mod11 <- vglm(y ~ carlsen_white + firouzja_white + rapport_white + duda_black + tari_black, family=cumulative(parallel = T, link="logitlink"), data = chessdata)
AIC(mod11)
AIC(mod1)
# making only classic data
classicdata <- subset(chessdata, type == "classic")
# model from the classic data
classicmod1 <- vglm(y ~ factor(white) + factor(black), family=cumulative(parallel = T, link="logitlink"), data = classicdata)
summary(classicmod1)
install.packages("formatR")
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE)
library("tidyverse")
library("aod")
library("lmtest")
library("readxl")
library("VGAM")
library("broom")
library("ggfortify")
library("MASS")
library("dampack")
library("mdscore")
library("formatR")
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE, tidy.opts = list(width.cutoff = 60), tidy = TRUE)
library("geepack")
library("lme4")
library("tidyverse")
library("aod")
library("lmtest")
library("readxl")
library("VGAM")
library("broom")
library("ggfortify")
library("MASS")
library("dampack")
library("mdscore")
library("formatR")
library("RLRsim")
library("sjPlot")
library("Matrix")
mylmm = function(y, x, group, REML) {
m <- nlevels(group)
X = model.matrix( ~ 1 + x)
# Computing U
U <- list() # set up an empty list
for (i in 1:m) {
# Construct and assign i'th block to i'th list element
U[[i]] <- cbind(1, x[group==unique(group)[i]])
}
# Change the list to a block diagonal matrix
U <- bdiag(U)
# G(theta)
getG <- function(theta) {
gg <- matrix(c(theta[1], theta[3] * sqrt(theta[1] * theta[2]), theta[3] * sqrt(theta[1] * theta[2]), theta[2]), nrow = 2, byrow = T)
gm <- list()
for(i in 1:m){
gm[[i]] = gg
}
return (bdiag(gm))
}
# R(theta)
getR <- function(theta) {
return (diag(rep(theta[4], length(y))))
}
# V(theta)
getV <- function(theta) {
return (as.matrix(U %*% getG(theta) %*% t(U) + getR(theta)))
}
# beta(theta)
getBeta <- function(theta) {
return (solve(t(X) %*% solve(getV(theta)) %*% X) %*% t(X) %*% solve(getV(theta)) %*% y)
}
# log likelihood, REML if true
loglik <- function(theta) {
V <- getV(theta)
betah <- getBeta(theta)
l <- -.5 * (determinant(V)$modulus + t(y - X %*% betah) %*% solve(V) %*% (y - X %*% betah))
if (REML)
l <- l - .5 * determinant(t(X) %*% solve(V) %*% X)$modulus
l
}
opt <- optim(c(1,1,1,1), fn = loglik, method = "L-BFGS-B", control = list(fnscale = -1), lower = c(0,0,-1,0), upper = c(Inf,Inf,1,Inf))
theta <- opt$par
thetam <- matrix(c(theta[1], sqrt(theta[1]), NaN, theta[2], sqrt(theta[2]), theta[3]), nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("(Intercept)", "Days"), c("Variance", "Std.Dev.", "Corr.")))
betas <- getBeta(theta)
var <- solve(t(X) %*% solve(getV(theta)) %*%X)
sdev <- sqrt(diag(var))
corr <- var[1,2] / (sdev[1] * sdev[2])
corrm <- matrix(corr, byrow = TRUE, dimnames = list(c("Days"), c("(Intr)")))
fixedeff <- matrix(c(betas[1], sdev[1], betas[2], sdev[2]), nrow = 2, ncol = 2, byrow = TRUE, dimnames = list(c("(Intercept)", "Days"), c("Estimate", "Std_Error")))
list("Random effects covariance matrix:" = thetam, "Correlation of Fixed Effects" = fixedeff, "Correlation of Fixed Effects:" = corrm)
}
rsleepmodF = lme4::lmer(Reaction ~ 1 + Days + (1 + Days|Subject), REML= F, data = sleepstudy)
summary(rsleepmodF)
sleepmodF <- mylmm(y = sleepstudy$Reaction, x = sleepstudy$Days, group = sleepstudy$Subject, REML = F)
sleepmodF
# rsleepmodT = lme4::lmer(Reaction ~ 1 + Days + (1 + Days|Subject), REML= T, data = sleepstudy)
# summary(rsleepmodT)
# sleepmodT <- mylmm(y = sleepstudy$Reaction, x = sleepstudy$Days, group = sleepstudy$Subject, REML = T)
# sleepmodT
2
invisible(2)
c(2, invisible(2))
rsleepmodF = lme4::lmer(Reaction ~ 1 + Days + (1 + Days|Subject), REML= F, data = sleepstudy)
summary(rsleepmodF)
sleepmodF <- mylmm(y = sleepstudy$Reaction, x = sleepstudy$Days, group = sleepstudy$Subject, REML = F)
sleepmodF
rsleepmodT = lme4::lmer(Reaction ~ 1 + Days + (1 + Days|Subject), REML= T, data = sleepstudy)
summary(rsleepmodT)
sleepmodT <- mylmm(y = sleepstudy$Reaction, x = sleepstudy$Days, group = sleepstudy$Subject, REML = T)
sleepmodT
data(ohio)
modglmm <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio)
summary(modglmm)$coefficients
modglm <- glm(resp ~ age + smoke, family = binomial(link = "logit"), ohio)
summary(modglm)$coefficients
cat("Conditional odds", exp(summary(modglmm)$coefficients[3,1]))
cat("Marginal odds", exp((1 + 0.6 * (0.28704)^2) * summary(modglm)$coefficients[3,1]))
cat("Conditional odds", exp(summary(modglmm)$coefficients[3,1]), "\nMarginal odds", exp((1 + 0.6 * (0.28704)^2) * summary(modglm)$coefficients[3,1]))
modglmmage <- glmer(resp ~ age + smoke + (1 | id) + (0 + age | id), family = binomial(link = "logit"), ohio)
summary(modglmmage)
lrtage <- head(2 * (logLik(modglmmage) - logLik(modglmm)))
modglmmsmoke <- glmer(resp ~ age + smoke + (1 | id) + (0 + smoke | id), family = binomial(link = "logit"), ohio)
summary(modglmmsmoke)
lrtsmoke <- head(2 * (logLik(modglmmsmoke) - logLik(modglmm)))
alpha <- 0.05
f <- function(x) {
0.5 * pchisq(x, 1, lower.tail = T) + 0.5 * pchisq(x, 2, lower.tail = T) - (1 - alpha)
}
crit <- uniroot(f, c(0,100))$root
cat("The critical value is", crit, "and the LRT of age and smoke models are", lrtage, "and", lrtsmoke, "respectively. These values are less than the critical, so we do NOT reject the null-hypothesis.")
bestadap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio)
for (i in 1:10) {
adap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio, nAGQ = i)
if (AIC(adap) < AIC(bestadap)) {
bestadap <- adap
}
}
summary(bestadap)
mat = matrix(,nrow = 11, ncol = 5)
colnames(mat) <- c("nAGQ", "logLik", "(Intercept)", "age", "smoke")
for (i in 0:10) {
adap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio, nAGQ = i)
mat[i + 1, 1] <- i
mat[i+1,2] <- head(logLik(adap))
mat[i+1,3:5] <- fixef(adap)
}
mat
bestadap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio)
for (i in 1:10) {
adap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio, nAGQ = i)
if (AIC(adap) < AIC(bestadap)) {
bestadap <- adap
}
}
bestadap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio)
for (i in 1:30) {
adap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio, nAGQ = i)
if (AIC(adap) < AIC(bestadap)) {
bestadap <- adap
}
}
summary(bestadap)
mat = matrix(,nrow = 11, ncol = 5)
colnames(mat) <- c("nAGQ", "logLik", "(Intercept)", "age", "smoke")
for (i in 0:30) {
adap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio, nAGQ = i)
mat[i + 1, 1] <- i
mat[i+1,2] <- head(logLik(adap))
mat[i+1,3:5] <- fixef(adap)
}
bestadap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio)
for (i in 1:30) {
adap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio, nAGQ = i)
if (AIC(adap) < AIC(bestadap)) {
bestadap <- adap
}
}
summary(bestadap)
mat = matrix(,nrow = 31, ncol = 5)
colnames(mat) <- c("nAGQ", "logLik", "(Intercept)", "age", "smoke")
for (i in 0:30) {
adap <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "logit"), ohio, nAGQ = i)
mat[i + 1, 1] <- i
mat[i+1,2] <- head(logLik(adap))
mat[i+1,3:5] <- fixef(adap)
}
mat
cat("Conditional odds", exp(summary(modglmm)$coefficients[3,1]), "\nMarginal odds", exp((1 + 0.6 * (0.28704)^2) * summary(modglm)$coefficients[3,1]))
summary(modglmm)$coefficients
summary(modglmm)
cov(modglmm)
summary(modglmmprobit)
modglmmprobit <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "probit"), ohio)
summary(modglmmprobit)
pvalage <- 0.5 * pchisq(lrtage, 1, lower.tail = T) + 0.5 * pchisq(lrtage, 2, lower.tail = T)
pvalage
summary(modglmmage)
summary(modglmmsmoke)
cat("The critical value is", crit, "\nLRT of age model:", lrtage, "\nLRT of model:", lrtsmoke)
modglmmprobit <- glmer(resp ~ age + smoke + (1 | id), family = binomial(link = "probit"), ohio)
summary(modglmmprobit)
