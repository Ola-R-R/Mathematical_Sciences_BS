res_matrix_LS[i,] <- ARp.resid(botsrapped_sequence,beta_boot)
matrix_of_beta_LS <- rbind(matrix_of_beta_LS,beta_boot)
#Repeat for LA
random_start_LA <- sample(99,1)
bootstrap_start_LA <- sapply(c(random_start_LA,random_start_LA+1),function(x) {data3A$x[x]})
random_sample_LA <- sample(98,100,replace=T)
bootstrap_e_LA <- sapply(random_sample_LA,function(x) {LA_em0[x]})
botsrapped_sequence_LA <- ARp.filter(bootstrap_start_LA,LA_b,bootstrap_e_LA)[3:102]
beta_boot_LA <- ARp.beta.est(botsrapped_sequence_LA,2)$LA
res_matrix_LA[i,] <- ARp.resid(botsrapped_sequence_LA,beta_boot_LA)
matrix_of_beta_LA <- rbind(matrix_of_beta_LA,beta_boot_LA)
}
matrix_of_beta_LS <- matrix_of_beta_LS[-c(1),]
matrix_of_beta_LA <- matrix_of_beta_LA[-c(1),]
b1_LS_bias <- mean(matrix_of_beta_LS[,1]) - LS_b[1]
b2_LS_bias <- mean(matrix_of_beta_LS[,2]) - LS_b[2]
b1_LS_var <- var(matrix_of_beta_LS[,1])
b2_LS_var <- var(matrix_of_beta_LS[,2])
b1_LA_bias <- mean(matrix_of_beta_LA[,1]) - LA_b[1]
b2_LA_bias <- mean(matrix_of_beta_LA[,2]) - LA_b[2]
b1_LA_var <- var(matrix_of_beta_LA[,1])
b2_LA_var <- var(matrix_of_beta_LA[,2])
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS.","\n")
cat("Beta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.","\n")
cat("Beta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.","\n")
cat("Beta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.","\n")
set.seed(98)
x <- data3A$x
n <- length(data3A$x)
#sample error from original sequence
error_index_LS_1 <- sample(1500,1500,replace=T)
error_index_LS_2 <- sample(98,1500,replace=T)
error_index_LA_1 <- sample(1500,1500,replace=T)
error_index_LA_2 <- sample(98,1500,replace=T)
error_boot_LS <- rep(0,1500)
error_boot_LA <- rep(0,1500)
for (j in c(1:1500)){
error_boot_LS[j] <- res_matrix_LS[error_index_LS_1[j],error_index_LS_2[j]]
error_boot_LA[j] <- res_matrix_LA[error_index_LA_1[j],error_index_LA_2[j]]
}
#Bootstrap sample from distribution of beta
index_sample_LS <- sample(1500,1500,replace=T)
index_sample_LA <- sample(1500,1500,replace=T)
#Do not know if beta_1 is independent of beta_2 thus we sample from same bootstrap
beta1_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,1]})
beta2_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,2]})
beta1_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,1]})
beta2_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,2]})
x_101_LS <- rep(0, B)
x_101_LA <- rep(0, B)
for(i in c(1:B)){
x_101_LS[i]=beta1_boot_LS[i]*x[n]+beta2_boot_LS[i]*x[n-1]+error_boot_LS[i]
x_101_LA[i]=beta1_boot_LA[i]*x[n]+beta2_boot_LA[i]*x[n-1]+error_boot_LA[i]
}
#calculate quantiles
q_LS=quantile(x_101_LS,c(0.025,0.975))
q_LA=quantile(x_101_LA,c(0.025,0.975))
#print results
cat("Quantiles LS",q_LS,"\n")
cat("Quantiles LA",q_LA,"\n")
df_LS=data.frame(x=x_101_LS)
p5 <-ggplot(df_LS, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LS estimators") + xlab("x_101")  + theme_grey(base_size = 7)
df_LA = data.frame(x = x_101_LA)
p6 <- ggplot(df_LA, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LA estimators") + xlab("x_101") + theme_grey(base_size = 7)
grid.arrange(p5,p6, nrow = 1)
bilirubin <- read.table("Files/bilirubin.txt",header=T)
df <- data.frame(matrix(NA,nrow=3,ncol=11), row.names = c("Individual 1: ", "Individual 2: ", "Individual 3: "))
colnames(df) <- rep("",11)
df[1,] <- t(bilirubin[bilirubin$pers == "p1",]$meas)
df[2,1:10] <- t(bilirubin[bilirubin$pers == "p2",]$meas)
df[3,1:8] <- t(bilirubin[bilirubin$pers == "p3",]$meas)
df[is.na(df)] <- ""
kable(df, escape = F, caption = "Concentration (mg/dL)")
boxplot(log(meas) ~ pers,bilirubin, col = c("red","green","blue"), main = "", xlab = "", names=c("Individual 1","Individual 2","Individual 3"), ylab = "log-values")
mod <- lm(log(meas) ~ pers, bilirubin)
mod_summary = summary(mod)
Fval <- mod_summary$fstatistic[1]
cat("F-statistic:", Fval, "with", mod_summary$fstatistic[2], "and", mod_summary$fstatistic[3], "degrees of freedom.")
permTest <- function(data,seed) {
set.seed(seed)
# Permutate the data
data$meas <- sample(data$meas)
# Fit model
mod <- lm(log(meas) ~ pers, data)
# Finding F-statistic
F_statistic <- summary(mod)$fstatistic[1]
return(F_statistic)
}
n <- 999
F_statistic <- numeric(n)
# Running 999 iterations
for (i in 1:n) {F_statistic[i] <- permTest(bilirubin,97+i)}
# Calculating p-value
p_value = sum(F_statistic > Fval)/n
cat("The p-value we get for our F-statistics is", p_value)
hist(F_statistic, xlab = "F-statistics", breaks = 100, main=NULL, freq = F, xlim = c(0,6), ylim = c(0,1), col = "darkgrey")
lines(seq(0, 6, .01), df(seq(0, 6, .01), df1 = mod_summary$fstatistic[2], df2 = mod_summary$fstatistic[3]), lwd = 5, col = "blue")
abline(v = Fval, lwd = 5, col = "red")
abline(v = quantile(F_statistic, probs = c(.95)), lwd = 3, lty = 2, col = "red")
z <- read.table("Files/z.txt")
u <- read.table("Files/u.txt")
E_step <- function(lambda, lambdat, z, u) {
# Eq. C.3:
n <- max(nrow(z),length(z))
first <- n * (log(lambda[1]) + log(lambda[2]))
second <- lambda[1] * sum(u*z + (1-u) * (1/lambdat[1] - z/(exp(lambdat[1] * z) - 1)))
third <- lambda[2] * sum((1-u)*z + u * (1/lambdat[2] - z/(exp(lambdat[2] * z) - 1)))
return(first - second - third)
}
M_step <- function(lambdat, z, u) {
n <- max(nrow(z),length(z))
# Eq. C.6:
lambda0new <- n/(sum(u*z + (1-u) * (1/lambdat[1] - z/(exp(lambdat[1] * z) - 1))))
# Eq. C.7:
lambda1new <- n/(sum((1-u)*z + u * (1/lambdat[2] - z/(exp(lambdat[2] * z) - 1))))
return(c(lambda0new, lambda1new))
}
EMalg <- function(z, u, lambda0 = 1, lambda1 = 1, tol = 1e-10) {
conv <- F
lambdat <- c(lambda0,lambda1)
lambdaall <- matrix(lambdat, ncol = 2)
e.log.lik <- c()
while (! conv) {
lambda <- M_step(lambdat, z, u)
e.log.lik <- c(e.log.lik, E_step(lambda, lambdat, z, u))
if (length(e.log.lik) >= 2) {if (abs(diff(tail(e.log.lik,2))) < tol) {conv <- T}}
lambdat <- lambda
lambdaall <- rbind(lambdaall, as.numeric(lambdat))
}
return(list(eloglikelihoods = e.log.lik, lambdas = lambdat, lambdaall = lambdaall))
}
EM <- EMalg(z,u)
par(mfrow=c(2,1))
plot(1:length(EM$eloglikelihoods),EM$eloglikelihoods, xlim = c(0,17), ylim = c(200,300), main="Convergence of the expected log likelihood", xlab = "Iteration", ylab = "Value", type = "b", lwd = 3)
plot(0:length(EM$eloglikelihoods),EM$lambdaall[,1], ylim = c(0, max(EM$lambdaall)), main = "Convergence of lambda", xlab = "Iteration", ylab = "Value", type = "b", lwd = 3, col = "blue")
lines(0:length(EM$eloglikelihoods),EM$lambdaall[,2], type = "b", lwd = 3, col = "red")
legend("bottomright", c("lambda0", "lambda1"), col = c("blue", "red"), lwd = 3, inset = .05)
cat("The final value of lambda0 is", tail(EM$lambdaall[,1],1), "\nThe final value of lambda1 is", tail(EM$lambdaall[,2],1))
lambda0 <- EM$lambdas[1]
lambda1 <- EM$lambdas[2]
set.seed(98)
B <- 1e4
n <- nrow(z)
lambda <- EM$lambdas
lambdastorage <- data.frame(matrix(NA,ncol = 2,nrow = B))
for (b in 1:B) {
x <- rexp(n,lambda[1])
y <- rexp(n,lambda[2])
zz <- pmax(x,y)
uu <- ifelse(x >= y, 1, 0)
lambdastorage[b,] <- EMalg(zz,uu)$lambdas
}
est <- data.frame(matrix(NA, nrow = 2, ncol = 3), row.names = c("lambda0", "lambda1"))
est[1,] <- as.numeric(c(sd(lambdastorage[,1]), mean(lambdastorage[,1]) - lambda[1], cor(lambdastorage[,1], lambdastorage[,2])))
est[2,] <- as.numeric(c(sd(lambdastorage[,2]), mean(lambdastorage[,2]) - lambda[2], cor(lambdastorage[,1], lambdastorage[,2])))
kable(est, escape = F, caption = "Standard Deviation, Bias, and Correlation of lambda0 and lambda1", col.names = c("Standard Deviation:", "Bias:", "Correlation:"))
u_data <- read.delim("Files/u.txt")
z_data <- read.delim("Files/z.txt")
#Something went a bit wrong with the data
#So i manually added the data point lost
u <- u_data$X1
u <- c(1,u)
z <- z_data$X0.2452096
z <- c(0.2452096,z)
log_likelihod_f <- function(par){
return(-1*(sum(log((u<(1/2))*((par[2])*exp(-par[2]*z)-(par[2])*exp(-(par[1]+par[2])*z)) + (u>(1/2))*((par[1])*exp(-par[1]*z)-(par[1])*exp(-(par[1]+par[2])*z))))))
}
optim(par=c(2,2),log_likelihod_f,method="L-BFGS-B")$par
\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.)
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS.
\nBeta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.
\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.
\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS.
\nBeta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.
\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.
\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS."
"\nBeta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS.",
"\nBeta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.
\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.
\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS.",
"\nBeta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(b1_LS_var,",",sep=""), " and bias,",b1_LS_bias,", using LS.",
"\nBeta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(b1_LS_var,",",sep=""), " and bias,", paste(b1_LS_bias,",",sep="")," using LS.",
"\nBeta 1 variance,", paste(b1_LA_var,",",sep=""), " and bias,",b1_LA_bias,", using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,3),",",sep=""), " and bias,", paste(b1_LS_bias,",",sep="")," using LS.",
"\nBeta 1 variance,", paste(b1_LA_var,",",sep=""), " and bias,",b1_LA_bias,", using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,5),",",sep=""), " and bias,", paste(b1_LS_bias,",",sep="")," using LS.",
"\nBeta 1 variance,", paste(b1_LA_var,",",sep=""), " and bias,",b1_LA_bias,", using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), " and bias,", paste(b1_LS_bias,",",sep="")," using LS.",
"\nBeta 1 variance,", paste(b1_LA_var,",",sep=""), " and bias,",b1_LA_bias,", using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), " and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(b1_LA_var,",",sep=""), " and bias,",b1_LA_bias,", using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), " and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), " and bias,",paste(round(b1_LA_bias,10),",",sep="")," using LA.",
"\nBeta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), " and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), " and bias,",paste(round(b1_LA_bias,10),",",sep="")," using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), ", and bias,",paste(round(b2_LS_bias,10),",",sep=""),", using LS.",
"\nBeta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), " and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), " and bias,", paste(round(b1_LA_bias,10),",",sep="")," using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), " and bias,", paste(round(b2_LS_bias,10),",",sep=""),", using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), " and bias,", paste(round(b2_LA_bias,10),",",sep=""),", using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias,", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias,", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,9),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias,", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias,", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
b1_LS_bias
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,9),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias,", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias,", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias,", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias,", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,9),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias,", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias,", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,9),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias, ", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias, ", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias, ", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias, ", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
b1_LA_bias
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=""),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias, ", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias, ", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=" "),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias, ", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias, ", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
#print results
cat("Quantiles LS",q_LS,
"\nQuantiles LA",q_LA)
set.seed(98)
x <- data3A$x
n <- length(data3A$x)
#sample error from original sequence
error_index_LS_1 <- sample(1500,1500,replace=T)
error_index_LS_2 <- sample(98,1500,replace=T)
error_index_LA_1 <- sample(1500,1500,replace=T)
error_index_LA_2 <- sample(98,1500,replace=T)
error_boot_LS <- rep(0,1500)
error_boot_LA <- rep(0,1500)
for (j in c(1:1500)){
error_boot_LS[j] <- res_matrix_LS[error_index_LS_1[j],error_index_LS_2[j]]
error_boot_LA[j] <- res_matrix_LA[error_index_LA_1[j],error_index_LA_2[j]]
}
#Bootstrap sample from distribution of beta
index_sample_LS <- sample(1500,1500,replace=T)
index_sample_LA <- sample(1500,1500,replace=T)
#Do not know if beta_1 is independent of beta_2 thus we sample from same bootstrap
beta1_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,1]})
beta2_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,2]})
beta1_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,1]})
beta2_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,2]})
x_101_LS <- rep(0, B)
x_101_LA <- rep(0, B)
for(i in c(1:B)){
x_101_LS[i]=beta1_boot_LS[i]*x[n]+beta2_boot_LS[i]*x[n-1]+error_boot_LS[i]
x_101_LA[i]=beta1_boot_LA[i]*x[n]+beta2_boot_LA[i]*x[n-1]+error_boot_LA[i]
}
#calculate quantiles
q_LS=quantile(x_101_LS,c(0.025,0.975))
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, fig.align = "center", tidy.opts = list(width.cutoff = 60), fig.height = 8)
library("tidyverse")
library("ggfortify")
library("MASS")
library("knitr")
library("rmarkdown")
library("palmerpenguins")
library("survival")
library("ggplot2")
library("gridExtra")
source("Files/probAhelp.R")
source("Files/probAdata.R")
head(data3A$x)
## LS model first (then repeat for LA)
#We start with the fit that we will bootstrap the residuals from
LS_b <- ARp.beta.est(data3A$x,2)$LS
LA_b <- ARp.beta.est(data3A$x,2)$LA
LS_em0 <- ARp.resid(data3A$x,LS_b)
LA_em0 <- ARp.resid(data3A$x,LA_b)
set.seed(98)
matrix_of_beta_LS <- matrix(c(NA,NA),nrow=1)
matrix_of_beta_LA <- matrix(c(NA,NA),nrow=1)
res_matrix_LS <- matrix(data=NA, nrow=1500,ncol=98)
res_matrix_LA <- matrix(data=NA, nrow=1500,ncol=98)
B <- 1500
for(i in c(1:1500)){
random_start <- sample(99,1) #random index for start
#find random two starts
bootstrap_start <- sapply(c(random_start,random_start+1),function(x) {data3A$x[x]})
#random index
random_sample <- sample(98,100,replace=T)
#now sample random e
bootstrap_e <- sapply(random_sample,function(x) {LS_em0[x]})
#generate random sequence with the residuals, beta, and random start
botsrapped_sequence <- ARp.filter(bootstrap_start,LS_b,bootstrap_e)[3:102]
#fit the regression
beta_boot <- ARp.beta.est(botsrapped_sequence,2)$LS
res_matrix_LS[i,] <- ARp.resid(botsrapped_sequence,beta_boot)
matrix_of_beta_LS <- rbind(matrix_of_beta_LS,beta_boot)
#Repeat for LA
random_start_LA <- sample(99,1)
bootstrap_start_LA <- sapply(c(random_start_LA,random_start_LA+1),function(x) {data3A$x[x]})
random_sample_LA <- sample(98,100,replace=T)
bootstrap_e_LA <- sapply(random_sample_LA,function(x) {LA_em0[x]})
botsrapped_sequence_LA <- ARp.filter(bootstrap_start_LA,LA_b,bootstrap_e_LA)[3:102]
beta_boot_LA <- ARp.beta.est(botsrapped_sequence_LA,2)$LA
res_matrix_LA[i,] <- ARp.resid(botsrapped_sequence_LA,beta_boot_LA)
matrix_of_beta_LA <- rbind(matrix_of_beta_LA,beta_boot_LA)
}
matrix_of_beta_LS <- matrix_of_beta_LS[-c(1),]
matrix_of_beta_LA <- matrix_of_beta_LA[-c(1),]
b1_LS_bias <- mean(matrix_of_beta_LS[,1]) - LS_b[1]
b2_LS_bias <- mean(matrix_of_beta_LS[,2]) - LS_b[2]
b1_LS_var <- var(matrix_of_beta_LS[,1])
b2_LS_var <- var(matrix_of_beta_LS[,2])
b1_LA_bias <- mean(matrix_of_beta_LA[,1]) - LA_b[1]
b2_LA_bias <- mean(matrix_of_beta_LA[,2]) - LA_b[2]
b1_LA_var <- var(matrix_of_beta_LA[,1])
b2_LA_var <- var(matrix_of_beta_LA[,2])
cat("Beta 1 variance,", paste(round(b1_LS_var,10),",",sep=""), "and bias,", paste(round(b1_LS_bias,10),",",sep="")," using LS.",
"\nBeta 1 variance,", paste(round(b1_LA_var,10),",",sep=""), "and bias,", paste(round(b1_LA_bias,10),",",sep=" "),"using LA.",
"\nBeta 2 variance,", paste(round(b2_LS_var,10),",",sep=""), "and bias, ", paste(round(b2_LS_bias,10),",",sep=""),"using LS.",
"\nBeta 2 variance,", paste(round(b2_LA_var,10),",",sep=""), "and bias, ", paste(round(b2_LA_bias,10),",",sep=""),"using LA.")
set.seed(98)
x <- data3A$x
n <- length(data3A$x)
#sample error from original sequence
error_index_LS_1 <- sample(1500,1500,replace=T)
error_index_LS_2 <- sample(98,1500,replace=T)
error_index_LA_1 <- sample(1500,1500,replace=T)
error_index_LA_2 <- sample(98,1500,replace=T)
error_boot_LS <- rep(0,1500)
error_boot_LA <- rep(0,1500)
for (j in c(1:1500)){
error_boot_LS[j] <- res_matrix_LS[error_index_LS_1[j],error_index_LS_2[j]]
error_boot_LA[j] <- res_matrix_LA[error_index_LA_1[j],error_index_LA_2[j]]
}
#Bootstrap sample from distribution of beta
index_sample_LS <- sample(1500,1500,replace=T)
index_sample_LA <- sample(1500,1500,replace=T)
#Do not know if beta_1 is independent of beta_2 thus we sample from same bootstrap
beta1_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,1]})
beta2_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,2]})
beta1_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,1]})
beta2_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,2]})
x_101_LS <- rep(0, B)
x_101_LA <- rep(0, B)
for(i in c(1:B)){
x_101_LS[i]=beta1_boot_LS[i]*x[n]+beta2_boot_LS[i]*x[n-1]+error_boot_LS[i]
x_101_LA[i]=beta1_boot_LA[i]*x[n]+beta2_boot_LA[i]*x[n-1]+error_boot_LA[i]
}
#calculate quantiles
q_LS=quantile(x_101_LS,c(0.025,0.975))
q_LA=quantile(x_101_LA,c(0.025,0.975))
#print results
cat("Quantiles LS",q_LS,
"\nQuantiles LA",q_LA)
df_LS=data.frame(x=x_101_LS)
p5 <-ggplot(df_LS, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LS estimators") + xlab("x_101")  + theme_grey(base_size = 7)
df_LA = data.frame(x = x_101_LA)
p6 <- ggplot(df_LA, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LA estimators") + xlab("x_101") + theme_grey(base_size = 7)
grid.arrange(p5,p6, nrow = 1)
set.seed(98)
x <- data3A$x
n <- length(data3A$x)
#sample error from original sequence
error_index_LS_1 <- sample(1500,1500,replace=T)
error_index_LS_2 <- sample(98,1500,replace=T)
error_index_LA_1 <- sample(1500,1500,replace=T)
error_index_LA_2 <- sample(98,1500,replace=T)
error_boot_LS <- rep(0,1500)
error_boot_LA <- rep(0,1500)
for (j in c(1:1500)){
error_boot_LS[j] <- res_matrix_LS[error_index_LS_1[j],error_index_LS_2[j]]
error_boot_LA[j] <- res_matrix_LA[error_index_LA_1[j],error_index_LA_2[j]]
}
#Bootstrap sample from distribution of beta
index_sample_LS <- sample(1500,1500,replace=T)
index_sample_LA <- sample(1500,1500,replace=T)
#Do not know if beta_1 is independent of beta_2 thus we sample from same bootstrap
beta1_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,1]})
beta2_boot_LS <- sapply(index_sample_LS,function(x) {matrix_of_beta_LS[x,2]})
beta1_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,1]})
beta2_boot_LA <- sapply(index_sample_LA,function(x) {matrix_of_beta_LA[x,2]})
x_101_LS <- rep(0, B)
x_101_LA <- rep(0, B)
for(i in c(1:B)){
x_101_LS[i]=beta1_boot_LS[i]*x[n]+beta2_boot_LS[i]*x[n-1]+error_boot_LS[i]
x_101_LA[i]=beta1_boot_LA[i]*x[n]+beta2_boot_LA[i]*x[n-1]+error_boot_LA[i]
}
#calculate quantiles
q_LS=quantile(x_101_LS,c(0.025,0.975))
q_LA=quantile(x_101_LA,c(0.025,0.975))
#print results
cat("Quantiles LS",q_LS,
"\nQuantiles LA",q_LA)
par(mfrow=c(2,1))
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(2,1))
hist(df_LS)
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(2,1))
hist(df_LS)
df_LS
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(2,1))
hist(df_LS$x)
hist(df_LA$x)
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x)
hist(df_LA$x)
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, main="Histogram of the distribution of \n x_101 with LS estimators")
hist(df_LA$x, main="Histogram of the distribution of \n x_101 with LA estimators")
df_LS
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators")
hist(df_LA$x, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators")
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
hist(df_LA$x, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
hist(df_LA$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
abline(v = c(7,22))
hist(df_LA$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
q_LS
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
abline(v = q_LS)
hist(df_LA$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
abline(v = q_LS)
hist(df_LA$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
abline(v = q_LA)
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
abline(v = q_LS, lwd = 3, col = "blue")
hist(df_LA$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
abline(v = q_LA, lwd = 3, col = "blue")
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(1,2))
hist(df_LS$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
abline(v = q_LS, lwd = 3, lty = 2, col = "blue")
hist(df_LA$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
abline(v = q_LA, lwd = 3, lty = 2, col = "blue")
df_LS=data.frame(x=x_101_LS)
df_LA = data.frame(x = x_101_LA)
par(mfrow=c(2,1))
hist(df_LS$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LS estimators", xlab="x_101")
abline(v = q_LS, lwd = 3, lty = 2, col = "blue")
hist(df_LA$x, freq = F, breaks = 100, main="Histogram of the distribution of \n x_101 with LA estimators", xlab = "x_101")
abline(v = q_LA, lwd = 3, lty = 2, col = "blue")
