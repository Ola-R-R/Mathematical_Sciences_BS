library(knitr)
knitr::opts_chunk$set(echo = TRUE,tidy=TRUE,message=FALSE,warning=FALSE,strip.white=TRUE,prompt=FALSE,
cache=FALSE, size="scriptsize",fig.width=4, fig.height=3,fig.align = "center")
source("probAhelp.R")
source("probAdata.R")
head(data3A$x)
library(knitr)
knitr::opts_chunk$set(echo = TRUE,tidy=TRUE,message=FALSE,warning=FALSE,strip.white=TRUE,prompt=FALSE,
cache=FALSE, size="scriptsize",fig.width=4, fig.height=3,fig.align = "center")
source("probAhelp.R")
source("probAdata.R")
## LS model first (then repeat for LA)
#We start with the fit that we will bootstrap the residuals from
LS_b <- ARp.beta.est(data3A$x,2)$LS
LA_b <- ARp.beta.est(data3A$x,2)$LA
LS_em0 <- ARp.resid(data3A$x,LS_b)
LA_em0 <- ARp.resid(data3A$x,LA_b)
set.seed(3)
matrix_of_beta_LS <- matrix(c(NA,NA),nrow=1)
matrix_of_beta_LA <- matrix(c(NA,NA),nrow=1)
B <- 1500
for(i in c(1:1500)){
random_start <- sample(99,1) #random index for start
#find random two starts
bootstrap_start <- sapply(c(random_start,random_start+1),function(x) {data3A$x[x]})
#random index
random_sample <- sample(98,98,replace=T)
#now sample random e
bootstrap_e <- sapply(random_sample,function(x) {LS_em0[x]})
#generate random sequence with the residuals, beta, and random start
botsrapped_sequence <- ARp.filter(bootstrap_start,LS_b,bootstrap_e)
#fit the regression
beta_boot <- ARp.beta.est(botsrapped_sequence,2)$LS
matrix_of_beta_LS <- rbind(matrix_of_beta_LS,beta_boot)
#Repeat for LA
random_start_LA <- sample(99,1)
bootstrap_start_LA <- sapply(c(random_start_LA,random_start_LA+1),function(x) {data3A$x[x]})
random_sample_LA <- sample(98,98,replace=T)
bootstrap_e_LA <- sapply(random_sample_LA,function(x) {LA_em0[x]})
botsrapped_sequence_LA <- ARp.filter(bootstrap_start_LA,LA_b,bootstrap_e_LA)
beta_boot_LA <- ARp.beta.est(botsrapped_sequence_LA,2)$LS
matrix_of_beta_LA <- rbind(matrix_of_beta_LA,beta_boot_LA)
}
matrix_of_beta_LS <- matrix_of_beta_LS[-c(1),]
matrix_of_beta_LA <- matrix_of_beta_LA[-c(1),]
b1_LS_bias <- mean(matrix_of_beta_LS[,1]) - LS_b[1]
b2_LS_bias <- mean(matrix_of_beta_LS[,2]) - LS_b[2]
b1_LS_var <- var(matrix_of_beta_LS[,1])
b2_LS_var <- var(matrix_of_beta_LS[,2])
b1_LA_bias <- mean(matrix_of_beta_LA[,1]) - LA_b[1]
b2_LA_bias <- mean(matrix_of_beta_LA[,2]) - LA_b[2]
b1_LA_var <- var(matrix_of_beta_LA[,1])
b2_LA_var <- var(matrix_of_beta_LA[,2])
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS.","\n")
cat("Beta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.","\n")
cat("Beta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.","\n")
cat("Beta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LS.","\n")
library(ggplot2)
library(gridExtra)
set.seed(3)
n = length(x)
n = length(data3A)
#we initialize our value x_101 that we will calculate for all bootstraps
x_101_LS = rep(0, B)
x_101_LA = rep(0, B)
B <- 1500
for(i in c(1:1500)){
random_start_LS <- sample(99,1) #random index for start
#find random two starts
bootstrap_start_LS <- sapply(c(random_start_LS,random_start_LS+1),function(x) {data3A$x[x]})
#random index
random_sample_LS <- sample(98,98,replace=T)
#now sample random e
bootstrap_e_LS <- sapply(random_sample_LS,function(x) {LS_em0[x]})
#generate random sequence with the residuals, beta, and random start
bootstrapped_sequence_LS <- ARp.filter(bootstrap_start,LS_b,bootstrap_e_LS)
#fit the regression and estimate beta
beta_boot_LS <- ARp.beta.est(bootstrapped_sequence_LS,2)$LS
#Repeat for LA
random_start_LA <- sample(99,1)
bootstrap_start_LA <- sapply(c(random_start_LA,random_start_LA+1),function(x) {data3A$x[x]})
random_sample_LA <- sample(98,98,replace=T)
bootstrap_e_LA <- sapply(random_sample_LA,function(x) {LA_em0[x]})
bootstrapped_sequence_LA <- ARp.filter(bootstrap_start_LA,LA_b,bootstrap_e_LA)
beta_boot_LA <- ARp.beta.est(bootstrapped_sequence_LA,2)$LS
### calculate x_101 LS and LA ###
#calculating residuals
bootstrap_e_101_LS=ARp.resid( bootstrapped_sequence_LS,beta_boot_LS)
bootstrap_e_101_LA=ARp.resid( bootstrapped_sequence_LA,beta_boot_LA)
#random residuals
random_residual=sample(1:length(bootstrap_e_101_LS),1)
e_101_LS=bootstrap_e_101_LS[random_residual]
e_101_LA=bootstrap_e_101_LA[random_residual]
#find x_101 using the formula x_101=beta_1*x_99+beta_2*x_100+residual
x_101_LS[i]=beta_boot_LS[1]*x[n]+beta_boot_LS[2]*x[n-1]+e_101_LS
x_101_LA[i]=beta_boot_LA[1]*x[n]+beta_boot_LA[2]*x[n-1]+e_101_LA
}
df_LS=data.frame(x=x_101_LS)
p5 <-ggplot(df_LS, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LS estimators") + xlab("x_101")  + theme_grey(base_size = 7)
df_LA = data.frame(x = x_101_LA)
p6 <- ggplot(df_LA, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LA estimators") + xlab("x_101") + theme_grey(base_size = 7)
grid.arrange(p5,p6, nrow = 1)
u_data <- read.delim("u.txt")
z_data <- read.delim("z.txt")
u <- u_data$X1
z <- z_data$X0.2452096
log_likelihod_f <- function(par){
return(-1*(sum(log((u<(1/2))*((par[2])*exp(-par[2]*z)-(par[2])*exp(-(par[1]+par[2])*z)) + (u>(1/2))*((par[1])*exp(-par[1]*z)-(par[1])*exp(-(par[1]+par[2])*z))))))
}
optim(par=c(2,2),log_likelihod_f,method="L-BFGS-B")$par
library(knitr)
knitr::opts_chunk$set(echo = TRUE,tidy=TRUE,message=FALSE,warning=FALSE,strip.white=TRUE,prompt=FALSE,
cache=FALSE, size="scriptsize",fig.width=4, fig.height=3,fig.align = "center")
source("probAhelp.R")
source("probAdata.R")
head(data3A$x)
## LS model first (then repeat for LA)
#We start with the fit that we will bootstrap the residuals from
LS_b <- ARp.beta.est(data3A$x,2)$LS
LA_b <- ARp.beta.est(data3A$x,2)$LA
LS_em0 <- ARp.resid(data3A$x,LS_b)
LA_em0 <- ARp.resid(data3A$x,LA_b)
set.seed(3)
matrix_of_beta_LS <- matrix(c(NA,NA),nrow=1)
matrix_of_beta_LA <- matrix(c(NA,NA),nrow=1)
B <- 1500
for(i in c(1:1500)){
random_start <- sample(99,1) #random index for start
#find random two starts
bootstrap_start <- sapply(c(random_start,random_start+1),function(x) {data3A$x[x]})
#random index
random_sample <- sample(98,98,replace=T)
#now sample random e
bootstrap_e <- sapply(random_sample,function(x) {LS_em0[x]})
#generate random sequence with the residuals, beta, and random start
botsrapped_sequence <- ARp.filter(bootstrap_start,LS_b,bootstrap_e)
#fit the regression
beta_boot <- ARp.beta.est(botsrapped_sequence,2)$LS
matrix_of_beta_LS <- rbind(matrix_of_beta_LS,beta_boot)
#Repeat for LA
random_start_LA <- sample(99,1)
bootstrap_start_LA <- sapply(c(random_start_LA,random_start_LA+1),function(x) {data3A$x[x]})
random_sample_LA <- sample(98,98,replace=T)
bootstrap_e_LA <- sapply(random_sample_LA,function(x) {LA_em0[x]})
botsrapped_sequence_LA <- ARp.filter(bootstrap_start_LA,LA_b,bootstrap_e_LA)
beta_boot_LA <- ARp.beta.est(botsrapped_sequence_LA,2)$LS
matrix_of_beta_LA <- rbind(matrix_of_beta_LA,beta_boot_LA)
}
matrix_of_beta_LS <- matrix_of_beta_LS[-c(1),]
matrix_of_beta_LA <- matrix_of_beta_LA[-c(1),]
b1_LS_bias <- mean(matrix_of_beta_LS[,1]) - LS_b[1]
b2_LS_bias <- mean(matrix_of_beta_LS[,2]) - LS_b[2]
b1_LS_var <- var(matrix_of_beta_LS[,1])
b2_LS_var <- var(matrix_of_beta_LS[,2])
b1_LA_bias <- mean(matrix_of_beta_LA[,1]) - LA_b[1]
b2_LA_bias <- mean(matrix_of_beta_LA[,2]) - LA_b[2]
b1_LA_var <- var(matrix_of_beta_LA[,1])
b2_LA_var <- var(matrix_of_beta_LA[,2])
cat("Beta 1 variance,", b1_LS_var, ", and bias,",b1_LS_bias,", using LS.","\n")
cat("Beta 1 variance,", b1_LA_var, ", and bias,",b1_LA_bias,", using LA.","\n")
cat("Beta 2 variance,", b2_LS_var, ", and bias,",b2_LS_bias,", using LS.","\n")
cat("Beta 2 variance,", b2_LA_var, ", and bias,",b2_LA_bias,", using LS.","\n")
library(ggplot2)
library(gridExtra)
set.seed(3)
x <- data3A$x
n = length(x)
#we initialize our value x_101 that we will calculate for all bootstraps
x_101_LS = rep(0, B)
x_101_LA = rep(0, B)
B <- 1500
for(i in c(1:1500)){
random_start_LS <- sample(99,1) #random index for start
#find random two starts
bootstrap_start_LS <- sapply(c(random_start_LS,random_start_LS+1),function(x) {data3A$x[x]})
#random index
random_sample_LS <- sample(98,98,replace=T)
#now sample random e
bootstrap_e_LS <- sapply(random_sample_LS,function(x) {LS_em0[x]})
#generate random sequence with the residuals, beta, and random start
bootstrapped_sequence_LS <- ARp.filter(bootstrap_start,LS_b,bootstrap_e_LS)
#fit the regression and estimate beta
beta_boot_LS <- ARp.beta.est(bootstrapped_sequence_LS,2)$LS
#Repeat for LA
random_start_LA <- sample(99,1)
bootstrap_start_LA <- sapply(c(random_start_LA,random_start_LA+1),function(x) {data3A$x[x]})
random_sample_LA <- sample(98,98,replace=T)
bootstrap_e_LA <- sapply(random_sample_LA,function(x) {LA_em0[x]})
bootstrapped_sequence_LA <- ARp.filter(bootstrap_start_LA,LA_b,bootstrap_e_LA)
beta_boot_LA <- ARp.beta.est(bootstrapped_sequence_LA,2)$LS
### calculate x_101 LS and LA ###
#calculating residuals
bootstrap_e_101_LS=ARp.resid( bootstrapped_sequence_LS,beta_boot_LS)
bootstrap_e_101_LA=ARp.resid( bootstrapped_sequence_LA,beta_boot_LA)
#random residuals
random_residual=sample(1:length(bootstrap_e_101_LS),1)
e_101_LS=bootstrap_e_101_LS[random_residual]
e_101_LA=bootstrap_e_101_LA[random_residual]
#find x_101 using the formula x_101=beta_1*x_99+beta_2*x_100+residual
x_101_LS[i]=beta_boot_LS[1]*x[n]+beta_boot_LS[2]*x[n-1]+e_101_LS
x_101_LA[i]=beta_boot_LA[1]*x[n]+beta_boot_LA[2]*x[n-1]+e_101_LA
}
#calculate quantiles
q_LS=quantile(x_101_LS,c(0.025,0.0975))
q_LA=quantile(x_101_LA,c(0.025,0.0975))
#print results
cat("Quantiles LS",q_LS,"\n")
cat("Quantiles LA",q_LA,"\n")
df_LS=data.frame(x=x_101_LS)
p5 <-ggplot(df_LS, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LS estimators") + xlab("x_101")  + theme_grey(base_size = 7)
df_LA = data.frame(x = x_101_LA)
p6 <- ggplot(df_LA, aes(x = x)) + geom_histogram(aes(y = ..density..)) + ggtitle("Histogram of the distribution of \n x_101 with LA estimators") + xlab("x_101") + theme_grey(base_size = 7)
grid.arrange(p5,p6, nrow = 1)
u_data <- read.delim("u.txt")
z_data <- read.delim("z.txt")
#Something went a bit wrong with the data
#So i manually added the data point lost
u <- u_data$X1
u <- c(1,u)
z <- z_data$X0.2452096
z <- c(0.2452096,z)
log_likelihod_f <- function(par){
return(-1*(sum(log((u<(1/2))*((par[2])*exp(-par[2]*z)-(par[2])*exp(-(par[1]+par[2])*z)) + (u>(1/2))*((par[1])*exp(-par[1]*z)-(par[1])*exp(-(par[1]+par[2])*z))))))
}
optim(par=c(2,2),log_likelihod_f,method="L-BFGS-B")$par
## LS model first (then repeat for LA)
#We start with the fit that we will bootstrap the residuals from
LS_b <- ARp.beta.est(data3A$x,2)$LS
LA_b <- ARp.beta.est(data3A$x,2)$LA
LS_em0 <- ARp.resid(data3A$x,LS_b)
LA_em0 <- ARp.resid(data3A$x,LA_b)
source("probAhelp.R")
data3A
source("probAhelp.R")
source("probAdata.R")
